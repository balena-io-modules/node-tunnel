// Generated by CoffeeScript 1.9.2
(function() {
  var EventEmitter, MiddlewareHandler, Promise, basicAuth, basicAuthParser, connectSocket, createTunnel, http, net, url;

  http = require('http');

  net = require('net');

  url = require('url');

  Promise = require('bluebird');

  basicAuthParser = require('basic-auth-parser');

  EventEmitter = require('events').EventEmitter;

  MiddlewareHandler = require('middleware-handler');

  MiddlewareHandler.prototype = Promise.promisifyAll(MiddlewareHandler.prototype);

  connectSocket = function(cltSocket, hostname, port, head) {
    var srvSocket;
    srvSocket = net.connect(port, hostname, function() {
      cltSocket.write('HTTP/1.0 200 Connection Established\r\nProxy-agent: Resin-VPN\r\n\r\n');
      srvSocket.write(head);
      srvSocket.pipe(cltSocket);
      return cltSocket.pipe(srvSocket);
    });
    return new Promise(function(resolve, reject) {
      cltSocket.on('close', function(had_error) {
        if (had_error) {
          return reject();
        } else {
          return resolve();
        }
      });
      return srvSocket.on('close', function(had_error) {
        if (had_error) {
          return reject();
        } else {
          return resolve();
        }
      });
    })["finally"](function(e) {
      return srvSocket.destroy();
    });
  };

  exports.createTunnel = createTunnel = function() {
    var middleware, server, tunnel;
    tunnel = new EventEmitter();
    middleware = new MiddlewareHandler();
    server = http.createServer(function(req, res) {
      res.writeHead(405, {
        'Content-Type': 'text/plain'
      });
      return res.end('Method not allowed');
    });
    server.on('connect', function(req, cltSocket, head) {
      return middleware.handleAsync([req, cltSocket, head]).then(function() {
        var srvUrl;
        srvUrl = url.parse("http://" + req.url);
        return connectSocket(cltSocket, srvUrl.hostname, srvUrl.port, head).then(function() {
          return tunnel.emit('connect', srvUrl.hostname, srvUrl.port, head);
        });
      })["catch"](function(err) {
        tunnel.emit('error', err);
        return cltSocket.destroy();
      });
    });
    tunnel.use = middleware.use.bind(middleware);
    tunnel.listen = server.listen.bind(server);
    tunnel.close = server.close.bind(server);
    return tunnel;
  };

  exports.basicAuth = basicAuth = function(req, cltSocket, head, next) {
    if (req.headers['proxy-authorization'] != null) {
      req.auth = basicAuthParser(req.headers['proxy-authorization']);
    }
    return next();
  };

}).call(this);
